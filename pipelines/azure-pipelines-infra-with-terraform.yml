#
# Pipeline that builds the Azure infrastructure and the Databricks workspace using Terraform
#

trigger:
  - none

variables:
  - template: vars.yml  # Template reference

parameters:
  - name: serviceConnection
    displayName: 'Azure Resource Manager service connection'
    type: string
    default: $(serviceConnection)

  - name: pool
    displayName: 'Agent Pool'
    type: object
    default:
      vmImage: 'ubuntu-latest'

  - name: terraformVersion
    displayName: 'Terraform version to install and use'
    type: string
    default: '1.4.0'

  - name: terraformLocation
    displayName: 'Base folder path containing the Terraform modules'
    type: string
    default: '$(System.DefaultWorkingDirectory)/terraform'

  - name: terraformBackendStorageAccountName
    displayName: 'Storage Account for the Terraform Backend'
    type: string
    default: $(tfStorageAccountName)

  - name: terraformBackendResourceGroupName
    displayName: 'Resource Group in which the Terraform Storage Account exists'
    type: string
    default: $(tfResourceGroupName)

  - name: terraformBackendContainerName
    displayName: 'Storage Container used by Terraform State files'
    type: string
    default: $(tfContainerName)

  - name: terraformBackendStateAzureInfrastructure
    displayName: 'Blob used for storing Terraform State file of the infrastructure'
    type: string
    default: 'infrastructure.tfstate'

  - name: terraformBackendStateDatabricksWorkspace
    displayName: 'Blob used for storing Terraform State file of the workspace'
    type: string
    default: 'workspace.tfstate'

stages:
  - stage: azureInfrastructure
    displayName: 'Deploy infrastructure'
    jobs:
      - job: azureResources
        displayName: 'Deploy Azure Resources'
        pool: ${{ parameters.pool }}
        # Make all Azure Pipelines variables available to Terraform (by adding TF_VAR_ to their name)
        variables:
          ${{ each variable in variables }}:
            TF_VAR_${{ variable.key }}: ${{ variable.value }}
        steps:
          - checkout: self

          # Deploy the core Azure infrastructure and Databricks workspace
          - template: 'templates/terraform-azure.yml'  # Template reference
            parameters:
              serviceConnection: ${{ parameters.serviceConnection }}
              terraformVersion: ${{ parameters.terraformVersion }}
              terraformWorkingDirectory: '${{ parameters.terraformLocation }}/deployments/azure-infrastructure'
              terraformBackendStorageAccountName: ${{ parameters.terraformBackendStorageAccountName }}
              terraformBackendResourceGroupName: ${{ parameters.terraformBackendResourceGroupName }}
              terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}
              terraformBackendKey: ${{ parameters.terraformBackendStateAzureInfrastructure }}

  - stage: workspaceBootstrap
    displayName: 'Bootstrap Workspace'
    dependsOn: azureInfrastructure
    jobs:
      - job: workspaceBootstrap
        displayName: 'Bootstrap Databricks Workspace'
        pool: ${{ parameters.pool }}
        # Make all Azure Pipelines variables available to Terraform (by adding TF_VAR_ to their name)
        variables:
          ${{ each variable in variables }}:
            TF_VAR_${{ variable.key }}: ${{ variable.value }}
          TF_VAR_PROJECT_MOUNT_POINT: '/mnt/${{ variables.STORAGE_ACCOUNT_NAME }}-${{ variables.PROJECT_CONTAINER_NAME }}'
        steps:
          - checkout: self

          # Bootstrap the Azure Databricks workspace
          - template: 'templates/terraform-azure.yml'  # Template reference
            parameters:
              serviceConnection: ${{ parameters.serviceConnection }}
              terraformVersion: ${{ parameters.terraformVersion }}
              terraformWorkingDirectory: '${{ parameters.terraformLocation }}/deployments/workspace-bootstrap'
              terraformBackendStorageAccountName: ${{ parameters.terraformBackendStorageAccountName }}
              terraformBackendResourceGroupName: ${{ parameters.terraformBackendResourceGroupName }}
              terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}
              terraformBackendKey: ${{ parameters.terraformBackendStateDatabricksWorkspace }}
